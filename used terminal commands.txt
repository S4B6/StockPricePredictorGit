
**************************************************************
Git Commands

•	Clone repository: git clone https://github.com/Maroqi67/StockPricePredictorGit.git
Downloads the GitHub repo to your local machine.

•	Stage changes: git add .
Stages all modified files for the next commit.

•	Commit changes: git commit -m "message"
Saves staged changes with a description.

•	Push to GitHub: git push origin main
Uploads local commits to the GitHub repo.

•   Pull latest changes: git pull origin main
Downloads and merges the latest changes from GitHub.

**************************************************************
Django Commands

•	Create Django project: django-admin startproject SPPdjango .
Sets up a Django project named SPPdjango in the current folder.

•	Apply migrations: python manage.py migrate
Sets up the initial database structure.

•	Run server: python manage.py runserver
Starts the Django development server at http://127.0.0.1:8000/.


**************************************************************
Virtual Environment & Dependencies

•	Create virtual environment: py -m venv venv
Creates a virtual environment named venv.

•	Activate virtual environment: .\venv\Scripts\activate
Activates venv as the default Python environment.

•	Deactivate virtual environment: deactivate
Deactivates the virtual environment.

•	Save dependencies: pip freeze > requirements.txt
Saves installed packages to requirements.txt for later use.

•	Insttall requirements: pip install -r requirements.txt

**************************************************************
Navigation

•	Change directory: cd "C:\Users\goatm\Desktop\Stock Price Predictor\StockPricePredictorGit"
Moves to the StockPricePredictorGit folder.

**************************************************************
SQL Commands in terminal

python manage.py migrate
python manage.py makemigrations
python manage.py fetch_data


**************************************************************
SQL Commands in pgadmin

DO $$
DECLARE
    table_name TEXT;
BEGIN
    -- Loop through all tables starting with 'markets_'
    FOR table_name IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
          AND tablename LIKE 'markets_%'
    LOOP
        -- Drop each table with CASCADE
        EXECUTE format('DROP TABLE IF EXISTS public.%I CASCADE;', table_name);
    END LOOP;
END $$;

DELETE FROM django_migrations WHERE app = 'markets';